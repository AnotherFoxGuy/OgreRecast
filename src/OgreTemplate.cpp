//----------------------------------------------------------------------------------//
// OgreRecast Demo - A demonstration of integrating Recast Navigation Meshes		//
//					 with the Ogre3D rendering engine.								//
//																					//
//	This file was either Created by or Modified by :								//
//													Paul A Wilson 					//
//			All contents are Copyright (C) 2010 Paul A Wilson						//
//			Except where otherwise mentioned or where previous						//
//			copyright exists. In the case of pre-existing copyrights				//
//			all rights remain with the original Authors, and this is				//
//			to be considered a derivative work.										//
//																					//
//	Contact Email	:	paulwilson77@dodo.com.au									//
//																					//
// This 'SOFTWARE' is provided 'AS-IS', without any express or implied				//
// warranty.  In no event will the authors be held liable for any damages			//
// arising from the use of this software.											//
// Permission is granted to anyone to use this software for any purpose,			//
// including commercial applications, and to alter it and redistribute it			//
// freely, subject to the following restrictions:									//
// 1. The origin of this software must not be misrepresented; you must not			//
//    claim that you wrote the original software. If you use this software			//
//    in a product, an acknowledgment in the product documentation would be			//
//    appreciated but is not required.												//
// 2. Altered source versions must be plainly marked as such, and must not be		//
//    misrepresented as being the original software.								//
// 3. This notice may not be removed or altered from any source distribution.		//
//																					//
//----------------------------------------------------------------------------------//


/*
-----------------------------------------------------------------------------
Filename:    OgreTemplate.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
	  Ogre 1.7.x Application Wizard for VC9 (January 2010)
	  http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "Ogre.h"
#include "OgreTemplate.h"
#include "SharedData.h"
#include "GUtility.h"
#include "InputGeom.h"
#include "GUIManager.h"
#include "NavMeshTesterTool.h"
#include "OffMeshConnectionTool.h"
#include "ConvexVolumeTool.h"
#include "NavMeshTileTool.h"
#include "FileList.h"

#include "Recast.h"
#include "RecastTimer.h"
#include "RecastDebugDraw.h"
#include "RecastDump.h"
#include "DetourNavMesh.h"
#include "DetourNavMeshBuilder.h"
#include "DetourDebugDraw.h"

using namespace Ogre;
using namespace OgreBites;

#ifdef WIN32
#	define snprintf _snprintf
#endif

//-----------------------------------------------------------------------------------
// FILE GLOBAL FUNCTIONS

// header / version of NavMeshSet
static const int NAVMESHSET_MAGIC = 'M'<<24 | 'S'<<16 | 'E'<<8 | 'T'; //'MSET';
// header / version of NavMeshSet
static const int NAVMESHSET_VERSION = 1;

// datafile header for NavMeshSet of NavMesh Tiles
struct NavMeshSetHeader
{
	int magic;
	int version;
	int numTiles;
	dtNavMeshParams params;
};

// datafile header for individual NavMesh Tiles
struct NavMeshTileHeader
{
	dtTileRef tileRef;
	int dataSize;
};

inline unsigned int nextPow2(unsigned int v)
{
	v--;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	v++;
	return v;
}

inline unsigned int ilog2(unsigned int v)
{
	unsigned int r;
	unsigned int shift;
	r = (v > 0xffff) << 4; v >>= r;
	shift = (v > 0xff) << 3; v >>= shift; r |= shift;
	shift = (v > 0xf) << 2; v >>= shift; r |= shift;
	shift = (v > 0x3) << 1; v >>= shift; r |= shift;
	r |= (v >> 1);
	return r;
}


// WAY too much in this class, I could move alot of this to other classes, but
// for the purpose of this demo, this is fine, just done use it as a "this is how its done"
// example, because this is NOT how it should be done at all ;)
//-------------------------------------------------------------------------------------
OgreTemplate::OgreTemplate(void):
	keepInterResults(true), cellSize(0.3f), cellHeight(0.2f), agentHeight(2.0f),
    agentRadius(0.6f), agentMaxClimb(1.2f), agentMaxSlope(50.0f), regionMinSize(50),
    regionMergeSize(20), edgeMaxLen(12.0f), edgeMaxError(1.3f), vertsPerPoly(6.0f),
    detailSampleDist(6.0f), detailSampleMaxError(1.0f),	mNavMeshShown(false), 
	mNavMeshBuilt(false), m_pmesh(0), mMatsLoaded(false), ddTiles(0), ddActiveTile(0),
	geom(0), m_navMesh(0),processHitTest(false), processHitTestShift(false), 
	movedDuringRotate(false), mposSet(false), m_sampleToolType(TOOL_NONE), ddBoundsDrawer(0), 
	ddMain(0), m_drawMode(DRAWMODE_NAVMESH), m_triflags(0), m_solid(0),m_chf(0), m_cset(0), 
	m_dmesh(0), mDebugEnabled(true), m_keepInterResults(true), DemoGUI(0), cursorX(0), cursorY(0), 
	m_tool(0), ddOffMesh(0), ddConvex(0), mMeshChanged(false), mSampleToolChanged(false),
	m_navMeshDrawFlags(DU_DRAWNAVMESH_CLOSEDLIST|DU_DRAWNAVMESH_OFFMESHCONS), mCastRays(true),
	m_buildAll(true), m_totalBuildTimeMs(0), m_maxTiles(0), m_maxPolysPerTile(0), m_tileSize(32),
	m_tileCol(duRGBA(0,0,0,32)), m_tileBuildTime(0), m_tileMemUsage(0), m_tileTriCount(0), mNavMeshLog(0),
	recalcActiveTile(true)
{
	for (unsigned int i = 0; i < MAX_DRAWMODE; ++i)
		valid[i] = false;

	for(unsigned int i = 0; i < 3; ++i)
	{
		rays[i] = 0;
		raye[i] = 0;
		mpos[i] = 0;
	}	

	memset(m_tileBmin, 0, sizeof(m_tileBmin));
	memset(m_tileBmax, 0, sizeof(m_tileBmax));
}
//-------------------------------------------------------------------------------------
OgreTemplate::~OgreTemplate(void)
{	
	delete [] m_triflags;
	m_triflags = 0;
	delete m_solid;
	m_solid = 0;
	delete m_chf;
	m_chf = 0;
	delete m_cset;
	m_cset = 0;
	delete m_pmesh;
	m_pmesh = 0;
	delete m_dmesh;
	m_dmesh = 0;
	delete m_navMesh;
	m_navMesh = 0;

	if(geom)
		delete geom;

	if(ddBoundsDrawer)
		{delete ddBoundsDrawer; ddBoundsDrawer = NULL;}
	
	if(ddMain)
		{delete ddMain;	ddMain = NULL;}

	if(ddConvex)
		{delete ddConvex; ddConvex = NULL;}

	if(ddOffMesh)
		{delete ddOffMesh; ddOffMesh = NULL;}

	if(ddTiles)
	{delete ddTiles; ddTiles = NULL;}

	if(ddActiveTile)
	{delete ddActiveTile; ddActiveTile = NULL;}

	if(DemoGUI != 0)
		delete ( GUIManager::getSingletonPtr() );

	delete ( SharedData::getSingletonPtr() );
}

//-------------------------------------------------------------------------------------
void OgreTemplate::createScene(void)
{	
	std::remove("NavMeshLog.log");
	mNavMeshLog = LogManager::getSingleton().createLog("NavMeshLog.log");

	ddBoundsDrawer = new DebugDrawGL();
	ddBoundsDrawer->getMaterial()->getTechnique(0)->getPass(0)->setDiffuse(1.0, 1.0, 1.0, 0); 
	ddBoundsDrawer->getMaterial()->getTechnique(0)->getPass(0)->setAmbient(1.0, 1.0, 1.0); 
	ddBoundsDrawer->getMaterial()->getTechnique(0)->getPass(0)->setSelfIllumination(1.0, 1.0, 1.0);


	ddMain = new DebugDrawGL();
	ddMain->setMaterialScript(Ogre::String("NavMeshVis"));
	ddMain->setOffset(0.15f);
	
	ddConvex = new DebugDrawGL();
	ddConvex->setMaterialScript(Ogre::String("Template/Blue50"));
	ddConvex->setOffset(0.16f);

	ddOffMesh = new DebugDrawGL();
	ddOffMesh->setMaterialScript(Ogre::String("Template/Blue50"));
	ddOffMesh->setOffset(0.37f);

	ddTiles = new DebugDrawGL();
	ddTiles->setMaterialScript(Ogre::String("InactiveTiles"));
	ddTiles->setOffset(0.20f);

	ddActiveTile = new DebugDrawGL();
	ddActiveTile->setMaterialScript(Ogre::String("ActiveTiles"));
	ddActiveTile->setOffset(0.20f);

	mRaySceneQuery = mSceneMgr->createRayQuery(Ray());

	//mSceneMgr->setFog(FOG_EXP, ColourValue(0.7f, 0.7f, 0.8f), 0.0001f, 3500, 5500);

	// Setup the main Directional Light - give some lighting definition to our scene.
	// and allowing our terrain to have a lightmap
 	Vector3 lightdir(0.55f, -0.3f, 0.75f);
 	lightdir.normalise();
 	Light* l = mSceneMgr->createLight("tstLight");
 	l->setType(Light::LT_DIRECTIONAL);
 	l->setDirection(lightdir);
 	l->setDiffuseColour(ColourValue::White);
 	l->setSpecularColour(ColourValue(0.4f, 0.4f, 0.4f));
	
	SharedData::getSingleton().iMainLight = l;
	// Set ambient light so that everything is not too dark
	mSceneMgr->setAmbientLight(Ogre::ColourValue(0.25f, 0.25f, 0.25f));
	
	handleValidDrawModes();

}

//-------------------------------------------------------------------------------------
void OgreTemplate::setupGUI(void)
{
	scanDirectory("../../Media/OgreRecastMedia/Meshes", ".mesh", files);
	SharedData::getSingleton().currentMeshName = currentMeshName = files.files[0];

	Ogre::StringVector meshGUINames; // names of meshes to display in gui menu - can be scenes but needs to be handled in code
	Ogre::StringVector meshNames; // names of meshes to pass to recast - only 1 at startup, but can be many
	meshNames.resize(0);
	meshGUINames.resize(0);
	for(unsigned int i = 0; i < files.size; ++i)
	{
		meshGUINames.push_back(files.files[i]);
	}
	meshGUINames.push_back("Terrain Scene");
	meshGUINames.push_back("All Meshes");

	meshNames.push_back(currentMeshName); // vector contains one name for one mesh to load but can have many
	geom = new InputGeom();
	geom->loadMesh(meshNames, meshNames);

	DemoGUI = new GUIManager();
	DemoGUI->init();
	DemoGUI->Startup(meshGUINames, this);

	
	rcSetLog(&SharedData::getSingleton().mDbgLog);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::buildNavMesh(NavSceneNodeList sceneNodeList, Ogre::SceneNode *parentSceneNode)
{
		

		 const float* bmin = geom->getMeshBoundsMin();
		 const float* bmax = geom->getMeshBoundsMax();
		 const float* verts = geom->getMesh()->getVerts();
		 const int nverts = geom->getMesh()->getVertCount();
		 const int* tris = geom->getMesh()->getTris();
		 const int ntris = geom->getMesh()->getTriCount();
         //config setup
         

         //setup rc config structure
		 memset(&m_cfg, 0, sizeof(m_cfg));
         m_cfg.cs = cellSize;
         m_cfg.ch = cellHeight;
         m_cfg.walkableSlopeAngle = agentMaxSlope;
         m_cfg.walkableHeight = (int)ceilf(agentHeight / m_cfg.ch);
         m_cfg.walkableClimb = (int)ceilf(agentMaxClimb / m_cfg.ch);
         m_cfg.walkableRadius = (int)ceilf(agentRadius / m_cfg.cs);
         m_cfg.maxEdgeLen = (int)(edgeMaxLen / cellSize);
         m_cfg.maxSimplificationError = edgeMaxError;
         m_cfg.minRegionSize = (int)rcSqr(regionMinSize);
         m_cfg.mergeRegionSize = (int)rcSqr(regionMergeSize);
         m_cfg.maxVertsPerPoly = (int)vertsPerPoly;
         m_cfg.detailSampleDist = detailSampleDist < 0.9f ? 0 : cellSize * detailSampleDist;
         m_cfg.detailSampleMaxError = cellHeight * detailSampleMaxError;
         m_cfg.borderSize = 0;


         // Set the area where the navigation will be build.
         // Here the bounds of the input mesh are used, but the
         // area could be specified by an user defined box, etc.
		 TemplateUtils::vcopy(m_cfg.bmin, bmin);
         TemplateUtils::vcopy(m_cfg.bmax, bmax);
         rcCalcGridSize(m_cfg.bmin, m_cfg.bmax, m_cfg.cs, &m_cfg.width, &m_cfg.height);

		 // Reset build times gathering.
		memset(&m_buildTimes, 0, sizeof(m_buildTimes));
		rcSetBuildTimes(&m_buildTimes);

		// Start the build process.	
		rcTimeVal totStartTime = rcGetPerformanceTimer();
	
		if (rcGetLog())
		{
			rcGetLog()->log(RC_LOG_PROGRESS, "Building navigation:");
			rcGetLog()->log(RC_LOG_PROGRESS, " - %d x %d cells", m_cfg.width, m_cfg.height);
			rcGetLog()->log(RC_LOG_PROGRESS, " - %.1fK verts, %.1fK tris", nverts/1000.0f, ntris/1000.0f);
		}
	
	//
	// Step 2. Rasterize input polygon soup.
	//
	
	// Allocate voxel heighfield where we rasterize our input data to.
	m_solid = new rcHeightfield;
	if (!m_solid)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'solid'.");
		return false;
	}
	if (!rcCreateHeightfield(*m_solid, m_cfg.width, m_cfg.height, m_cfg.bmin, m_cfg.bmax, m_cfg.cs, m_cfg.ch))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not create solid heightfield.");
		return false;
	}
	
	// Allocate array that can hold triangle flags.
	// If you have multiple meshes you need to process, allocate
	// and array which can hold the max number of triangles you need to process.
	m_triflags = new unsigned char[ntris];
	if (!m_triflags)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'triangleFlags' (%d).", ntris);
		return false;
	}
	
	// Find triangles which are walkable based on their slope and rasterize them.
	// If your input data is multiple meshes, you can transform them here, calculate
	// the flags for each of the meshes and rasterize them.
	memset(m_triflags, 0, ntris*sizeof(unsigned char));
	rcMarkWalkableTriangles(m_cfg.walkableSlopeAngle, verts, nverts, tris, ntris, m_triflags);
	rcRasterizeTriangles(verts, nverts, tris, m_triflags, ntris, *m_solid, m_cfg.walkableClimb);

	if (!m_keepInterResults)
	{
		delete [] m_triflags;
		m_triflags = 0;
	}

	
	//
	// Step 3. Filter walkables surfaces.
	//
	
	// Once all geoemtry is rasterized, we do initial pass of filtering to
	// remove unwanted overhangs caused by the conservative rasterization
	// as well as filter spans where the character cannot possibly stand.
	rcFilterLowHangingWalkableObstacles(m_cfg.walkableClimb, *m_solid);
	rcFilterLedgeSpans(m_cfg.walkableHeight, m_cfg.walkableClimb, *m_solid);
	rcFilterWalkableLowHeightSpans(m_cfg.walkableHeight, *m_solid);


	
	//
	// Step 4. Partition walkable surface to simple regions.
	//

	// Compact the heightfield so that it is faster to handle from now on.
	// This will result more cache coherent data as well as the neighbours
	// between walkable cells will be calculated.
	m_chf = new rcCompactHeightfield;
	if (!m_chf)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'chf'.");
		return false;
	}
	if (!rcBuildCompactHeightfield(m_cfg.walkableHeight, m_cfg.walkableClimb, RC_WALKABLE, *m_solid, *m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build compact data.");
		return false;
	}
	
	if (!m_keepInterResults)
	{
		delete m_solid;
		m_solid = 0;
	}
		
	// Erode the walkable area by agent radius.
	if (!rcErodeArea(RC_WALKABLE_AREA, m_cfg.walkableRadius, *m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not erode.");
		return false;
	}
	
	// (Optional) Mark areas.
	const ConvexVolume* vols = geom->getConvexVolumes();
	for (int i  = 0; i < geom->getConvexVolumeCount(); ++i)
		rcMarkConvexPolyArea(vols[i].verts, vols[i].nverts, vols[i].hmin, vols[i].hmax, (unsigned char)vols[i].area, *m_chf);
	
	// Prepare for region partitioning, by calculating distance field along the walkable surface.
	if (!rcBuildDistanceField(*m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build distance field.");
		return false;
	}

	// Partition the walkable surface into simple regions without holes.
	if (!rcBuildRegions(*m_chf, m_cfg.borderSize, m_cfg.minRegionSize, m_cfg.mergeRegionSize))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build regions.");
	}

	
	//
	// Step 5. Trace and simplify region contours.
	//
	
	// Create contours.
	m_cset = new rcContourSet;
	if (!m_cset)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'cset'.");
		return false;
	}
	if (!rcBuildContours(*m_chf, m_cfg.maxSimplificationError, m_cfg.maxEdgeLen, *m_cset))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not create contours.");
		return false;
	}
	
	
	//
	// Step 6. Build polygons mesh from contours.
	//
	
	// Build polygon navmesh from the contours.
	m_pmesh = new rcPolyMesh;
	if (!m_pmesh)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'pmesh'.");
		return false;
	}
	if (!rcBuildPolyMesh(*m_cset, m_cfg.maxVertsPerPoly, *m_pmesh))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not triangulate contours.");
		return false;
	}
	
	
	//
	// Step 7. Create detail mesh which allows to access approximate height on each polygon.
	//
	
	m_dmesh = new rcPolyMeshDetail;
	if (!m_dmesh)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'pmdtl'.");
		return false;
	}

	if (!rcBuildPolyMeshDetail(*m_pmesh, *m_chf, m_cfg.detailSampleDist, m_cfg.detailSampleMaxError, *m_dmesh))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build detail mesh.");
	}

	if (!m_keepInterResults)
	{
		delete m_chf;
		m_chf = 0;
		delete m_cset;
		m_cset = 0;
	}

	//
	// (Optional) Step 8. Create Detour data from Recast poly mesh.
	//

	// The GUI may allow more max points per polygon than Detour can handle.
	// Only build the detour navmesh if we do not exceed the limit.
	if (m_cfg.maxVertsPerPoly <= DT_VERTS_PER_POLYGON)
	{
		unsigned char* navData = 0;
		int navDataSize = 0;

		// Update poly flags from areas.
		for (int i = 0; i < m_pmesh->npolys; ++i)
		{
			if (m_pmesh->areas[i] == RC_WALKABLE_AREA)
				m_pmesh->areas[i] = SAMPLE_POLYAREA_GROUND;

			if (m_pmesh->areas[i] == SAMPLE_POLYAREA_GROUND ||
				m_pmesh->areas[i] == SAMPLE_POLYAREA_GRASS ||
				m_pmesh->areas[i] == SAMPLE_POLYAREA_ROAD)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_WALK;
			}
			else if (m_pmesh->areas[i] == SAMPLE_POLYAREA_WATER)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_SWIM;
			}
			else if (m_pmesh->areas[i] == SAMPLE_POLYAREA_DOOR)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_WALK | SAMPLE_POLYFLAGS_DOOR;
			}
		}


		dtNavMeshCreateParams params;
		memset(&params, 0, sizeof(params));
		params.verts = m_pmesh->verts;
		params.vertCount = m_pmesh->nverts;
		params.polys = m_pmesh->polys;
		params.polyAreas = m_pmesh->areas;
		params.polyFlags = m_pmesh->flags;
		params.polyCount = m_pmesh->npolys;
		params.nvp = m_pmesh->nvp;
		params.detailMeshes = m_dmesh->meshes;
		params.detailVerts = m_dmesh->verts;
		params.detailVertsCount = m_dmesh->nverts;
		params.detailTris = m_dmesh->tris;
		params.detailTriCount = m_dmesh->ntris;
		params.offMeshConVerts = geom->getOffMeshConnectionVerts();
		params.offMeshConRad = geom->getOffMeshConnectionRads();
		params.offMeshConDir = geom->getOffMeshConnectionDirs();
		params.offMeshConAreas = geom->getOffMeshConnectionAreas();
		params.offMeshConFlags = geom->getOffMeshConnectionFlags();
		params.offMeshConCount = geom->getOffMeshConnectionCount();
		params.walkableHeight = agentHeight;
		params.walkableRadius = agentRadius;
		params.walkableClimb = agentMaxClimb;
		rcVcopy(params.bmin, m_pmesh->bmin);
		rcVcopy(params.bmax, m_pmesh->bmax);
		params.cs = m_cfg.cs;
		params.ch = m_cfg.ch;

		if (!dtCreateNavMeshData(&params, &navData, &navDataSize))
		{
			if (rcGetLog())
				rcGetLog()->log(RC_LOG_ERROR, "Could not build Detour navmesh.");
			return false;
		}

		m_navMesh = new dtNavMesh;
		if (!m_navMesh)
		{
			delete [] navData;
			if (rcGetLog())
				rcGetLog()->log(RC_LOG_ERROR, "Could not create Detour navmesh");
			return false;
		}

		if (!m_navMesh->init(navData, navDataSize, DT_TILE_FREE_DATA, 2048))
		{
			delete [] navData;
			if (rcGetLog())
				rcGetLog()->log(RC_LOG_ERROR, "Could not init Detour navmesh");
			return false;
		}
	}

	rcTimeVal totEndTime = rcGetPerformanceTimer();

	// Show performance stats.
	if (rcGetLog())
	{
		const float pc = 100.0f / rcGetDeltaTimeUsec(totStartTime, totEndTime);

		rcGetLog()->log(RC_LOG_PROGRESS, "Rasterize: %.1fms (%.1f%%)", m_buildTimes.rasterizeTriangles/1000.0f, m_buildTimes.rasterizeTriangles*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Compact: %.1fms (%.1f%%)", m_buildTimes.buildCompact/1000.0f, m_buildTimes.buildCompact*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Border: %.1fms (%.1f%%)", m_buildTimes.filterBorder/1000.0f, m_buildTimes.filterBorder*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Walkable: %.1fms (%.1f%%)", m_buildTimes.filterWalkable/1000.0f, m_buildTimes.filterWalkable*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Reachable: %.1fms (%.1f%%)", m_buildTimes.filterMarkReachable/1000.0f, m_buildTimes.filterMarkReachable*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Erode walkable area: %.1fms (%.1f%%)", m_buildTimes.erodeArea/1000.0f, m_buildTimes.erodeArea*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Distancefield: %.1fms (%.1f%%)", m_buildTimes.buildDistanceField/1000.0f, m_buildTimes.buildDistanceField*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - distance: %.1fms (%.1f%%)", m_buildTimes.buildDistanceFieldDist/1000.0f, m_buildTimes.buildDistanceFieldDist*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - blur: %.1fms (%.1f%%)", m_buildTimes.buildDistanceFieldBlur/1000.0f, m_buildTimes.buildDistanceFieldBlur*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Regions: %.1fms (%.1f%%)", m_buildTimes.buildRegions/1000.0f, m_buildTimes.buildRegions*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - watershed: %.1fms (%.1f%%)", m_buildTimes.buildRegionsReg/1000.0f, m_buildTimes.buildRegionsReg*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "    - expand: %.1fms (%.1f%%)", m_buildTimes.buildRegionsExp/1000.0f, m_buildTimes.buildRegionsExp*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "    - find catchment basins: %.1fms (%.1f%%)", m_buildTimes.buildRegionsFlood/1000.0f, m_buildTimes.buildRegionsFlood*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - filter: %.1fms (%.1f%%)", m_buildTimes.buildRegionsFilter/1000.0f, m_buildTimes.buildRegionsFilter*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Contours: %.1fms (%.1f%%)", m_buildTimes.buildContours/1000.0f, m_buildTimes.buildContours*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - trace: %.1fms (%.1f%%)", m_buildTimes.buildContoursTrace/1000.0f, m_buildTimes.buildContoursTrace*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - simplify: %.1fms (%.1f%%)", m_buildTimes.buildContoursSimplify/1000.0f, m_buildTimes.buildContoursSimplify*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Polymesh: %.1fms (%.1f%%)", m_buildTimes.buildPolymesh/1000.0f, m_buildTimes.buildPolymesh*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Build Polymesh Detail: %.1fms (%.1f%%)", m_buildTimes.buildDetailMesh/1000.0f, m_buildTimes.buildDetailMesh*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Polymesh: Verts:%d  Polys:%d", m_pmesh->nverts, m_pmesh->npolys);

		rcGetLog()->log(RC_LOG_PROGRESS, "TOTAL: %.1fms", rcGetDeltaTimeUsec(totStartTime, totEndTime)/1000.0f);
	}

	m_totalBuildTimeMs = rcGetDeltaTimeUsec(totStartTime, totEndTime)/1000.0f;

	//if (m_tool)
	//	m_tool->init(this);
	handleValidDrawModes();

	DemoGUI->updateDebugRB();
	return true;
}

//-------------------------------------------------------------------------------------
void OgreTemplate::showNavMesh(rcPolyMesh *polyMesh, Ogre::SceneNode *parentSceneNode)
{
}

//-------------------------------------------------------------------------------------
void OgreTemplate::hideNavMesh(void)
{
}

//-------------------------------------------------------------------------------------
void OgreTemplate::handleRenderTiles()
{
	if (!geom || !geom->getMesh())
		return;

	if (m_drawMode == DRAWMODE_MESH)
	{
		// Draw mesh
		duDebugDrawTriMesh(ddMain, geom->getMesh()->getVerts(), geom->getMesh()->getVertCount(),
			geom->getMesh()->getTris(), geom->getMesh()->getNormals(), geom->getMesh()->getTriCount(), 0);
		geom->drawOffMeshConnections(ddOffMesh);
	}
	
	ddMain->depthMask(false);
	ddOffMesh->depthMask(false);
	ddBoundsDrawer->depthMask(false);

	// Draw bounds
	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();
	duDebugDrawBoxWire(ddBoundsDrawer, bmin[0],bmin[1],bmin[2], bmax[0],bmax[1],bmax[2], duRGBA(255,255,255,128), 1.0f);

	// Tiling grid.
	int gw = 0, gh = 0;
	rcCalcGridSize(bmin, bmax, cellSize, &gw, &gh);
	const int tw = (gw + (int)m_tileSize-1) / (int)m_tileSize;
	const int th = (gh + (int)m_tileSize-1) / (int)m_tileSize;
	const float s = m_tileSize*cellSize;
		duDebugDrawGridXZ(ddTiles, bmin[0],bmin[1],bmin[2], tw,th, s, duRGBA(0,0,0,64), 1.0f);

	// make sure we put the green tile selector back in the correct place
	// if we change the mesh
	if(recalcActiveTile)
	{
		for (int y = 0; y < th; ++y)
		{
			for (int x = 0; x < tw; ++x)
			{
				m_tileBmin[0] = bmin[0] + x*s;
				m_tileBmin[1] = bmin[1];
				m_tileBmin[2] = bmin[2] + y*s;

				m_tileBmax[0] = bmin[0] + (x+1)*s;
				m_tileBmax[1] = bmax[1];
				m_tileBmax[2] = bmin[2] + (y+1)*s;
			}
		}
		recalcActiveTile = false;
	}
	// Draw active tile
	duDebugDrawBoxWire(ddActiveTile, m_tileBmin[0],m_tileBmin[1],m_tileBmin[2], m_tileBmax[0],m_tileBmax[1],m_tileBmax[2], m_tileCol, 2.0f);

	ddMain->depthMask(true);
	ddOffMesh->depthMask(true);
	ddBoundsDrawer->depthMask(true);

	// only draw the debug navmesh if we arent in the terrain scene. Otherwise
	// frame rates drop to stupid level.... 0.2 frames per second is no good.
	if(m_navMesh)
	{
		if(SharedData::getSingleton().m_AppMode != APPMODE_TERRAINSCENE)
				duDebugDrawNavMesh(ddMain, *m_navMesh, m_navMeshDrawFlags);
	}

	geom->drawConvexVolumes(ddConvex);	
}

//-------------------------------------------------------------------------------------
// THIS METHOD IS ONLY USED IN THE DRAWING FOR SOLOMESH, TILEMESH HANDLES ITSELF DIFFERENTLY
// AND I HAVE NOT IMPLEMENTED A SOLUTION TO DRAW IT'S CONSTITUENT PARTS
void OgreTemplate::handleRenderDebug()
{
	if (!geom || !geom->getMesh())
		return;

	ddMain->depthMask(true);
	ddOffMesh->depthMask(true);

	if (m_drawMode == DRAWMODE_MESH)
	{
		// Draw mesh
		duDebugDrawTriMeshSlope(ddMain, geom->getMesh()->getVerts(), geom->getMesh()->getVertCount(),
			geom->getMesh()->getTris(), geom->getMesh()->getNormals(), geom->getMesh()->getTriCount(),
			agentMaxSlope);
		geom->drawOffMeshConnections(ddOffMesh);
	}
	else if (m_drawMode != DRAWMODE_NAVMESH_TRANS)
	{
		// Draw mesh
		//duDebugDrawTriMesh(ddMain, geom->getMesh()->getVerts(), geom->getMesh()->getVertCount(),
		//	geom->getMesh()->getTris(), geom->getMesh()->getNormals(), geom->getMesh()->getTriCount(), 0);
		geom->drawOffMeshConnections(ddOffMesh);
	}

	ddMain->depthMask(false);
	ddOffMesh->depthMask(false);
	
	// Draw bounds
	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();
	duDebugDrawBoxWire(ddBoundsDrawer, bmin[0],bmin[1],bmin[2], bmax[0],bmax[1],bmax[2], duRGBA(255,255,255,128), 1.0f);

	if (m_navMesh &&
		(m_drawMode == DRAWMODE_NAVMESH ||
		m_drawMode == DRAWMODE_NAVMESH_TRANS ||
		m_drawMode == DRAWMODE_NAVMESH_BVTREE ||
		m_drawMode == DRAWMODE_NAVMESH_INVIS))
	{
		if (m_drawMode != DRAWMODE_NAVMESH_INVIS)
			duDebugDrawNavMesh(ddMain, *m_navMesh, m_navMeshDrawFlags);
		if (m_drawMode == DRAWMODE_NAVMESH_BVTREE)
			duDebugDrawNavMeshBVTree(ddMain, *m_navMesh);
	}


	if (m_chf && m_drawMode == DRAWMODE_COMPACT)
		duDebugDrawCompactHeightfieldSolid(ddMain, *m_chf);

	if (m_chf && m_drawMode == DRAWMODE_COMPACT_DISTANCE)
		duDebugDrawCompactHeightfieldDistance(ddMain, *m_chf);
	if (m_chf && m_drawMode == DRAWMODE_COMPACT_REGIONS)
		duDebugDrawCompactHeightfieldRegions(ddMain, *m_chf);
	if (m_solid && m_drawMode == DRAWMODE_VOXELS)
	{
		duDebugDrawHeightfieldSolid(ddMain, *m_solid);
	}
	if (m_solid && m_drawMode == DRAWMODE_VOXELS_WALKABLE)
	{
		duDebugDrawHeightfieldWalkable(ddMain, *m_solid);
	}
	if (m_cset && m_drawMode == DRAWMODE_RAW_CONTOURS)
	{
		duDebugDrawRawContours(ddMain, *m_cset);
	}
	if (m_cset && m_drawMode == DRAWMODE_BOTH_CONTOURS)
	{
		duDebugDrawRawContours(ddMain, *m_cset, 0.5f);
		duDebugDrawContours(ddMain, *m_cset);
	}
	if (m_cset && m_drawMode == DRAWMODE_CONTOURS)
	{
		duDebugDrawContours(ddMain, *m_cset);
	}
	if (m_chf && m_cset && m_drawMode == DRAWMODE_REGION_CONNECTIONS)
	{
		duDebugDrawCompactHeightfieldRegions(ddMain, *m_chf);
		duDebugDrawRegionConnections(ddMain, *m_cset);
	}
	if (m_pmesh && m_drawMode == DRAWMODE_POLYMESH)
	{
		duDebugDrawPolyMesh(ddMain, *m_pmesh);
	}
	if (m_dmesh && m_drawMode == DRAWMODE_POLYMESH_DETAIL)
	{
		duDebugDrawPolyMeshDetail(ddMain, *m_dmesh);
	}

	geom->drawConvexVolumes(ddConvex);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::frameStarted(const Ogre::FrameEvent& evt)
{
	// clear all of our debug drawers here once at the start of the render loop
	// they may possibly need to be cleared elsewhere peacemeal to make sure
	// that things draw poperly. This is due to the fact that Ogre does it's
	// manual object rendering in a different way than OpenGL, which is what
	// the Recast sample's framework is built around
	ddBoundsDrawer->clear();
	ddMain->clear();
	ddConvex->clear();
	ddOffMesh->clear();
	ddTiles->clear();
	ddActiveTile->clear();

	
	int cnt = SharedData::getSingleton().mDbgLog.getMessageCount();
	if(cnt > 0)
	{
		for (int i = 0; i < cnt; ++i)
		{
			// comment this is u get errors here, depending on the recast log data
			// the console may not handle it well
			Ogre::String str = SharedData::getSingleton().mDbgLog.getMessageText(i); 
			mNavMeshLog->logMessage(str);
		}
		SharedData::getSingleton().mDbgLog.clear();
	}

	SharedData::getSingleton().iLastFrameTime = evt.timeSinceLastFrame;
	
	// check if we should cast rays before we do
	// this is set to false when the mouse enters a window 
	// see GUIManager::handleMouseEntersFrame and GUIManager::handleMouseLeavesFrame
 if(mCastRays)
 {
	// cast a ray from the mouse, 10000 units into the scene
	// this ray is used to test against the mesh if the mouse is pressed
	r = mCamera->getCameraToViewportRay(cursorX, cursorY); 
	rays[0] = (float)r.getOrigin().x; rays[1] = (float)r.getOrigin().y; rays[2] = (float)r.getOrigin().z;
	raye[0] = (float)r.getPoint(10000.0).x; raye[1] = (float)r.getPoint(10000.0).y; raye[2] = (float)r.getPoint(10000.0).z;

	// Hit test mesh.
	if (processHitTest && geom)
	{
		if(SharedData::getSingleton().m_AppMode != APPMODE_NONE)
		{
			float tt = 0;
			if (geom->raycastMesh(rays, raye, tt))
			{
				if (mControlMod)
				{
					// Marker
					mposSet = true;
					mpos[0] = rays[0] + (raye[0] - rays[0])*tt;
					mpos[1] = rays[1] + (raye[1] - rays[1])*tt;
					mpos[2] = rays[2] + (raye[2] - rays[2])*tt;
				}
				else
				{
					float pos[3];
					pos[0] = rays[0] + (raye[0] - rays[0])*tt;
					pos[1] = rays[1] + (raye[1] - rays[1])*tt;
					pos[2] = rays[2] + (raye[2] - rays[2])*tt;
					if(m_tool)
						m_tool->handleClick(pos, processHitTestShift);
				}
			}
			else
			{
				if (mControlMod)
				{
					// Marker
					mposSet = false;
				}
			}
		}
	}	
 }

 // change offsets of debug drawers for visibility of terrain, scale is so different from original
 // meshes that it looks aweful otherwise - zfighting issues
 if(SharedData::getSingleton().m_AppMode == APPMODE_TERRAINSCENE)
 {
	ddMain->setOffset(2.0f);
	ddOffMesh->setOffset(2.25f);
	ddConvex->setOffset(2.25f);
 }
 else
 {
	 ddMain->setOffset(0.25f);
	 ddOffMesh->setOffset(0.35f);
	 ddConvex->setOffset(0.35f);
 }

	if(geom)
	{
		if(SharedData::getSingleton().m_AppMode == APPMODE_TERRAINSCENE)
		{
			geom->getMeshObject()->frameRender(evt);
		}
		
		if(mDebugEnabled)
		{
			//handleRenderDebug(); // unused now with TileMesh
			handleRenderTiles();
		}
		if(m_sampleToolType != TOOL_NONE)
		{
			if(m_tool)
			{
				m_tool->handleRender();
			}
		}
	}
	processHitTest = false;

	return BaseApplication::frameStarted(evt);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::frameRenderingQueued(const Ogre::FrameEvent& evt)
{

	if(DemoGUI != 0)
	{
		if(keepInterResults != DemoGUI->getIntermediateResultCheck() ||
		   m_keepInterResults != DemoGUI->getIntermediateResultCheck() )
		{
			keepInterResults = DemoGUI->getIntermediateResultCheck();
			m_keepInterResults = DemoGUI->getIntermediateResultCheck();
		}
		if(DemoGUI->getBuildToggled())
		{
			// LEGACY from old non-TileMesh demo - left code in for demo purposes
			//buildNavMesh(SharedData::getSingleton().mNavNodeList, mSceneMgr->getRootSceneNode());
			if(!handleBuild())
				mNavMeshBuilt = false;
			else
				mNavMeshBuilt = true;
			DemoGUI->setBuildToggled(false);
		}
		if(DemoGUI->getClearToggled())
		{
			clearNavMesh();
		}
		if(DemoGUI->getSaveToggled())
		{
			handleSaveNavMesh(NAVMESHFILE);
		}
		if(DemoGUI->getLoadToggled())
		{
			handleLoadNavMesh(NAVMESHFILE);
		}
		if(mMeshChanged)
		{
			handleMeshChange();
			mMeshChanged = false;
			recalcActiveTile = true;
		}
			
		// MESSY MESSY MESSY
		// I SHOULD redo this debug code, its aweful, slow and messy
		// it does its job though, so it stays for the timebeing
		const RenderTarget::FrameStats& stats = mWindow->getStatistics();

		static String avgFps = "Average FPS: ";
		static String currFps = "Current FPS: ";
		static String tris = "Triangle Count: ";
		static String ddMouseX = "MouseX : ";
		static String ddMouseY = "MouseY : ";

		String curTexMode = "Texture Mode : ";
		switch(m_textureFilter)
		{
		case FILTER_BILINEAR:
			curTexMode += "Bilinear";
			
			break;
		case FILTER_ANISOTROPIC:
			curTexMode += "Anisotropic";
			
			break;
		case FILTER_NONE:
			curTexMode += "None";
			
			break;
		default:
			curTexMode += "Trilinear";
		}
	
		String polyMode = "Polygon Draw Mode : ";
		switch (mCamera->getPolygonMode())
		{
		case Ogre::PM_SOLID:
			polyMode += "Solid";
			break;
		case Ogre::PM_WIREFRAME:
			polyMode += "Wireframe";
			break;
		default:
			polyMode += "Points";
		}

		static String camPos = "Cam : ";
		
		Ogre::StringConverter::toString(mCamera->getDerivedPosition().y);
		Ogre::StringConverter::toString(mCamera->getDerivedPosition().z);

		String final =  (avgFps + StringConverter::toString(stats.avgFPS) + "\n" + 
						currFps + StringConverter::toString(stats.lastFPS) + "\n" +
						tris + StringConverter::toString(stats.triangleCount) + "\n" +
						ddMouseX + StringConverter::toString(cursorX) + "\n" +
						ddMouseY + StringConverter::toString(cursorY) + "\n" +
						curTexMode + "\n" +
						polyMode + "\n" +
						camPos + Ogre::StringConverter::toString(mCamera->getDerivedPosition().x) + " , " + 
								 Ogre::StringConverter::toString(mCamera->getDerivedPosition().y) + " , " +
								 Ogre::StringConverter::toString(mCamera->getDerivedPosition().z)
						);

		DemoGUI->setStatusText(final);

		String sVoxels = "Voxels - ";
		String sTiles = "Tiles - ";
		String sMaxTiles = "Max Tiles - ";
		String sMaxPolys = "Max Polys - ";
		if (geom)
		{
			const float* bmin = geom->getMeshBoundsMin();
			const float* bmax = geom->getMeshBoundsMax();
			char text[64];
			int gw = 0, gh = 0;
			rcCalcGridSize(bmin, bmax, cellSize, &gw, &gh);
			sVoxels += StringConverter::toString(gw) + "  x  " + StringConverter::toString(gh);
			const int ts = (int)m_tileSize;
			const int tw = (gw + ts-1) / ts;
			const int th = (gh + ts-1) / ts;
			sTiles += StringConverter::toString(tw) + "  x  " + StringConverter::toString(th);

			// Max tiles and max polys affect how the tile IDs are caculated.
			// There are 22 bits available for identifying a tile and a polygon.
			int tileBits = rcMin((int)ilog2(nextPow2(tw*th)), 14);
			if (tileBits > 14) tileBits = 14;
			int polyBits = 22 - tileBits;
			m_maxTiles = 1 << tileBits;
			m_maxPolysPerTile = 1 << polyBits;
			sMaxTiles += StringConverter::toString(m_maxTiles);
			sMaxPolys += StringConverter::toString(m_maxPolysPerTile);
		}
		else
		{
			m_maxTiles = 0;
			m_maxPolysPerTile = 0;
			sVoxels += "0 x 0";
			sTiles += "0 x 0";
			sMaxTiles += StringConverter::toString(m_maxTiles);
			sMaxPolys += StringConverter::toString(m_maxPolysPerTile);
		}

		String DBGFinal = (sVoxels + "\n" +
						   sTiles + "\n" +
						   sMaxTiles + "\n" +
						   sMaxPolys );

		DemoGUI->setStatusDBGText(DBGFinal);
	}


	if(DemoGUI != 0)
	{
		if(DemoGUI->GetShuttingDown() == true)
		{
			DemoGUI->Shutdown();
			mShutDown = true;
		}
	}
		
	return BaseApplication::frameRenderingQueued(evt);

}

//-------------------------------------------------------------------------------------
bool OgreTemplate::frameEnded(const Ogre::FrameEvent& evt)
{
	

	return BaseApplication::frameEnded(evt);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::keyPressed( const OIS::KeyEvent &arg )
{
	if(geom)
	{
		if(SharedData::getSingleton().m_AppMode == APPMODE_TERRAINSCENE)
		{
			geom->getMeshObject()->keyPressed(arg);
		}
	}

	switch(arg.key)
	{
	case OIS::KC_SPACE:
		if(m_sampleToolType != TOOL_NONE)
		{
			if(m_tool)
			{
				m_tool->handleStep();
			}
		}
		break;
	default:
		break;
	}
	
	if(DemoGUI != 0)
	{
		DemoGUI->keyPressed(arg);
	}

	return BaseApplication::keyPressed(arg); 
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::keyReleased( const OIS::KeyEvent &arg )
{
	switch(arg.key)
	{
	case OIS::KC_SPACE:
		break;
	default:
		break;
	}
	
	if(DemoGUI != 0)
	{
		DemoGUI->keyReleased(arg);
	}

	return BaseApplication::keyReleased(arg);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::mouseMoved( const OIS::MouseEvent &arg )
{
	// used for casting a ray into the scene from the mouse
	// ray query is done without Ogre - handled by recast
	cursorX = Ogre::Real((Ogre::Real(arg.state.X.abs)) / mWindow->getWidth());
	cursorY = Ogre::Real((Ogre::Real(arg.state.Y.abs)) / mWindow->getHeight());

	if(DemoGUI != 0)
	{
		DemoGUI->mouseMoved(arg);
	}

	return BaseApplication::mouseMoved(arg);
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	switch(id)
	{
	case OIS::MB_Left:
		processHitTest = true;
		if(mShiftMod)
			processHitTestShift = true;
		else
			processHitTestShift = false;
		break;
	case OIS::MB_Middle:
		break;
	case OIS::MB_Right:
		break;
	default:
		break;
	}

	if(DemoGUI != 0)
	{
		DemoGUI->mousePressed(arg, id);
	}

	return BaseApplication::mousePressed(arg, id); 
}

//-------------------------------------------------------------------------------------
bool OgreTemplate::mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id )
{
	switch(id)
	{
	case OIS::MB_Left:			
		break;
	case OIS::MB_Middle:
		break;
	case OIS::MB_Right:
		break;
	default:
		break;
	}

	if(DemoGUI != 0)
	{
		DemoGUI->mouseReleased(arg, id);
	}

	return BaseApplication::mouseReleased(arg, id);
}


//-------------------------------------------------------------------------------------
bool OgreTemplate::handleValidDrawModes(void)
{ 
	//-----------------------------------------------
	// setup valid drawmodes
	// Check which modes are valid.
	for (int i = 0; i < MAX_DRAWMODE; ++i)
		valid[i] = false;

	// these will NEVER be valid anymore, TILEMESH debug drawing is not possible at
	// this stage, i will implement it later
	if (geom)
	{
		valid[DRAWMODE_MESH] = true;
		valid[DRAWMODE_NAVMESH] = true; //m_navMesh != 0; // ALTERED TO TURN OFF INPUT GEOM DRAWER
		valid[DRAWMODE_NAVMESH_INVIS] = m_navMesh != 0;
		valid[DRAWMODE_NAVMESH_TRANS] = m_navMesh != 0;
		valid[DRAWMODE_NAVMESH_BVTREE] = m_navMesh != 0;
		valid[DRAWMODE_VOXELS] = m_solid != 0;
		valid[DRAWMODE_VOXELS_WALKABLE] = m_solid != 0;
		valid[DRAWMODE_COMPACT] = m_chf != 0;
		valid[DRAWMODE_COMPACT_DISTANCE] = m_chf != 0;
		valid[DRAWMODE_COMPACT_REGIONS] = m_chf != 0;
		valid[DRAWMODE_REGION_CONNECTIONS] = m_cset != 0;
		valid[DRAWMODE_RAW_CONTOURS] = m_cset != 0;
		valid[DRAWMODE_BOTH_CONTOURS] = m_cset != 0;
		valid[DRAWMODE_CONTOURS] = m_cset != 0;
		valid[DRAWMODE_POLYMESH_DETAIL] = m_dmesh != 0;
		valid[DRAWMODE_POLYMESH] = m_pmesh != 0;
	}
	
	int unavail = 0;
	for (int i = 0; i < MAX_DRAWMODE; ++i)
		if (!valid[i]) unavail++;

	return true;
}


//-------------------------------------------------------------------------------------
void OgreTemplate::setTool(SampleTool* tool)
{
	if(m_tool)
		delete m_tool;

	m_tool = tool;

	if (tool)
		m_tool->init(this);
}

//-------------------------------------------------------------------------------------
void OgreTemplate::handleToolChange(void)
{	

	switch(m_sampleToolType)
	{
	case TOOL_TILE_EDIT:
		setTool(new NavMeshTileTool);
		break;
	case TOOL_NAVMESH_TESTER:
		if(m_navMesh)
		{
			setTool(new NavMeshTesterTool);
			DemoGUI->resetNavTest();
			if(m_tool)
			{
				static_cast<NavMeshTesterTool*>(m_tool)->m_filter.includeFlags = SAMPLE_POLYFLAGS_ALL;
				static_cast<NavMeshTesterTool*>(m_tool)->m_filter.excludeFlags = 0;
			}
		}
		else
		{
			DemoGUI->setInfoPanelText("You must have built a Navigation Mesh to use Navigation Mesh Test Tools.");
			DemoGUI->hideAllTools();
		}
		break;
	case TOOL_OFFMESH_CONNECTION:
		setTool(new OffMeshConnectionTool);
		break;
	case TOOL_CONVEX_VOLUME:
		setTool(new ConvexVolumeTool);
		break;
	case TOOL_NONE:
		if(m_tool)
		{
			delete m_tool;
			m_tool = 0;
		}
		break;
	default:
		if(m_tool)
		{
			delete m_tool;
			m_tool = 0;
		}
		break;
	}

}


void OgreTemplate::setSampleToolType(int _tooltype)
{ 
	switch(_tooltype)
	{
	case 1:
		m_sampleToolType = TOOL_TILE_EDIT;
		break;
	case 3:
		m_sampleToolType = TOOL_NAVMESH_TESTER;
		break;
	case 4:
		m_sampleToolType = TOOL_OFFMESH_CONNECTION;
		break;
	case 5:
		m_sampleToolType = TOOL_CONVEX_VOLUME;
		break;
	default:
		m_sampleToolType = TOOL_NONE;
	}
	 
	 handleToolChange(); 
}
//-------------------------------------------------------------------------------------
void OgreTemplate::resetCommonSettings()
{
	cellSize = 0.3f;
	cellHeight = 0.2f;
	agentHeight = 2.0f;
	agentRadius = 0.6f;
	agentMaxClimb = 0.9f;
	agentMaxSlope = 45.0f;
	regionMinSize = 50;
	regionMergeSize = 20;
	edgeMaxLen = 12.0f;
	edgeMaxError = 1.3f;
	vertsPerPoly = 6.0f;
	detailSampleDist = 6.0f;
	detailSampleMaxError = 1.0f;
}


//-------------------------------------------------------------------------------------
void OgreTemplate::handleSaveNavMesh(Ogre::String& saveName)
{
	if(!m_navMesh)
		return;
	saveAll(saveName.c_str(), m_navMesh);
}

//-------------------------------------------------------------------------------------
void OgreTemplate::handleLoadNavMesh(Ogre::String& loadName)
{
	
	if(m_navMesh)
		delete m_navMesh;

	m_navMesh = loadAll(loadName.c_str());
}

//-------------------------------------------------------------------------------------
void OgreTemplate::clearNavMesh(void)
{
	if(m_triflags)
	{
		delete [] m_triflags;
		m_triflags = 0;
	}
	if(m_pmesh)
	{
		delete m_pmesh;
		m_pmesh = 0;
	}
	if(m_solid)
	{
		delete m_solid;
		m_solid = 0;
	}
	if(m_chf)
	{
		delete m_chf;
		m_chf = 0;
	}
	if(m_cset)
	{
		delete m_cset;
		m_cset = 0;
	}
	if(m_dmesh)
	{
		delete m_dmesh;
		m_dmesh = 0;
	}
	if(m_navMesh)
	{
		delete m_navMesh;
		m_navMesh = 0;
	}

	m_sampleToolType = TOOL_NONE;
	if(m_tool)
	{
		delete m_tool;
		m_tool = 0;
	}
	DemoGUI->hideAllTools();
	DemoGUI->setClearToggled(false);
	handleValidDrawModes();
	DemoGUI->updateDebugRB();
	mNavMeshBuilt = false;
}


//-------------------------------------------------------------------------------------
void OgreTemplate::cleanup()
{
	if(m_triflags)
	{
		delete [] m_triflags;
		m_triflags = 0;
	}
	if(m_pmesh)
	{
		delete m_pmesh;
		m_pmesh = 0;
	}
	if(m_solid)
	{
		delete m_solid;
		m_solid = 0;
	}
	if(m_chf)
	{
		delete m_chf;
		m_chf = 0;
	}
	if(m_cset)
	{
		delete m_cset;
		m_cset = 0;
	}
	if(m_dmesh)
	{
		delete m_dmesh;
		m_dmesh = 0;
	}
}

//-------------------------------------------------------------------------------------
void OgreTemplate::handleMeshChange(void)
{
	clearNavMesh();
	if(geom)
		delete geom;

	Ogre::StringVector newNames;
	newNames.resize(0);

	geom = new InputGeom();

	if(currentMeshName == "All Meshes")
	{
		newNames.push_back("NavMesh.mesh");
		newNames.push_back("DungeonNavMesh.mesh");
		geom->loadMesh(newNames, newNames);
		SharedData::getSingleton().m_AppMode = APPMODE_MESHSCENE;
	}
	else if(currentMeshName == "Terrain Scene")
	{
		// TODO : add entity support for terrain entities
		geom->loadTerrain();
		SharedData::getSingleton().m_AppMode = APPMODE_TERRAINSCENE;
	}
	else if(currentMeshName == "City Scene")
	{
		// TODO implement multiple entity city scene
	}
	else
	{
		newNames.push_back(currentMeshName);
		geom->loadMesh(newNames, newNames);
		SharedData::getSingleton().m_AppMode = APPMODE_MESHSCENE;
	}
}


//-------------------------------------------------------------------------------------
void OgreTemplate::saveAll(const char* path, const dtNavMesh* mesh)
{
	if (!mesh) return;

	bool foundBinFile = false;
	scanDirectory("./", ".bin", saveFiles);
	for(uint i = 0; i < saveFiles.size; ++i)
	{
		Ogre::String str = saveFiles.files[i];
		if(str == NAVMESHFILE)
		{
			foundBinFile = true;
			if(std::remove(str.c_str()) != -1)
			{
				LogManager::getSingleton().logMessage("DELETED All_Tiles_NavMesh.bin OK.");
				break;
			}
			else
			{
				LogManager::getSingleton().logMessage("FAILED TO DELETE All_Tiles_NavMesh.bin, it WAS found. Is it read only ?");
				break;
			}
		}

	}

	FILE* fp = fopen(path, "wb");
	if (!fp)
		return;

	// Store header.
	NavMeshSetHeader header;
	header.magic = NAVMESHSET_MAGIC;
	header.version = NAVMESHSET_VERSION;
	header.numTiles = 0;
	for (int i = 0; i < mesh->getMaxTiles(); ++i)
	{
		const dtMeshTile* tile = mesh->getTile(i);
		if (!tile || !tile->header || !tile->dataSize) continue;
		header.numTiles++;
	}
	memcpy(&header.params, mesh->getParams(), sizeof(dtNavMeshParams));
	fwrite(&header, sizeof(NavMeshSetHeader), 1, fp);

	// Store tiles.
	for (int i = 0; i < mesh->getMaxTiles(); ++i)
	{
		const dtMeshTile* tile = mesh->getTile(i);
		if (!tile || !tile->header || !tile->dataSize) continue;

		NavMeshTileHeader tileHeader;
		tileHeader.tileRef = mesh->getTileRef(tile);
		tileHeader.dataSize = tile->dataSize;
		fwrite(&tileHeader, sizeof(tileHeader), 1, fp);

		fwrite(tile->data, tile->dataSize, 1, fp);
	}

	fclose(fp);
}

//-------------------------------------------------------------------------------------
dtNavMesh* OgreTemplate::loadAll(const char* path)
{
	FILE* fp = fopen(path, "rb");
	if (!fp) return 0;

	// Read header.
	NavMeshSetHeader header;
	fread(&header, sizeof(NavMeshSetHeader), 1, fp);
	if (header.magic != NAVMESHSET_MAGIC)
	{
		fclose(fp);
		return 0;
	}
	if (header.version != NAVMESHSET_VERSION)
	{
		fclose(fp);
		return 0;
	}

	dtNavMesh* mesh = new dtNavMesh;
	if (!mesh || !mesh->init(&header.params))
	{
		fclose(fp);
		return 0;
	}

	// Read tiles.
	for (int i = 0; i < header.numTiles; ++i)
	{
		NavMeshTileHeader tileHeader;
		fread(&tileHeader, sizeof(tileHeader), 1, fp);
		if (!tileHeader.tileRef || !tileHeader.dataSize)
			break;

		unsigned char* data = new unsigned char[tileHeader.dataSize];
		if (!data) break;
		memset(data, 0, tileHeader.dataSize);
		fread(data, tileHeader.dataSize, 1, fp);

		mesh->addTile(data, tileHeader.dataSize, DT_TILE_FREE_DATA, tileHeader.tileRef);
	}

	fclose(fp);

	return mesh;
}


//-------------------------------------------------------------------------------------
bool OgreTemplate::handleBuild()
{
	if(!geom)  
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildTiledNavigation: No Input Geometry objects instanced.");
		return false;
	}
	if(!geom->getMesh())
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildTiledNavigation: No vertices and triangles.");
		return false;
	}

	if(m_sampleToolType != TOOL_NONE)
	{
		setSampleToolType(TOOL_NONE);
		DemoGUI->hideAllTools();
	}

	if(m_navMesh)
		delete m_navMesh;

	m_navMesh = new dtNavMesh;
	if (!m_navMesh)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildTiledNavigation: Could not allocate navmesh.");
		return false;
	}

	dtNavMeshParams params;
	rcVcopy(params.orig, geom->getMeshBoundsMin());
	params.tileWidth = m_tileSize*cellSize;
	params.tileHeight = m_tileSize*cellSize;
	params.maxTiles = m_maxTiles;
	params.maxPolys = m_maxPolysPerTile;
	params.maxNodes = 2048;

	if (!m_navMesh->init(&params))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildTiledNavigation: Could not init navmesh.");
		return false;
	}

	if (m_buildAll)
		buildAllTiles();

	return true;
}

//-------------------------------------------------------------------------------------
void OgreTemplate::buildTile(const float* pos)
{
	if (!geom) return;
	if (!m_navMesh) return;

	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();

	const float ts = m_tileSize*cellSize;
	const int tx = (int)((pos[0] - bmin[0]) / ts);
	const int ty = (int)((pos[2] - bmin[2]) / ts);

	m_tileBmin[0] = bmin[0] + tx*ts;
	m_tileBmin[1] = bmin[1];
	m_tileBmin[2] = bmin[2] + ty*ts;

	m_tileBmax[0] = bmin[0] + (tx+1)*ts;
	m_tileBmax[1] = bmax[1];
	m_tileBmax[2] = bmin[2] + (ty+1)*ts;

	m_tileCol = duRGBA(77,204,0,255);

	int dataSize = 0;
	unsigned char* data = buildTileMesh(tx, ty, m_tileBmin, m_tileBmax, dataSize);

	if (data)
	{
		// Remove any previous data (navmesh owns and deletes the data).
		m_navMesh->removeTile(m_navMesh->getTileRefAt(tx,ty),0,0);

		// Let the navmesh own the data.
		if (!m_navMesh->addTile(data,dataSize,DT_TILE_FREE_DATA))
			delete [] data;
	}
}

//-------------------------------------------------------------------------------------
void OgreTemplate::removeTile(const float* pos)
{
	if (!geom) return;
	if (!m_navMesh) return;

	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();

	const float ts = m_tileSize*cellSize;
	const int tx = (int)((pos[0] - bmin[0]) / ts);
	const int ty = (int)((pos[2] - bmin[2]) / ts);

	m_tileBmin[0] = bmin[0] + tx*ts;
	m_tileBmin[1] = bmin[1];
	m_tileBmin[2] = bmin[2] + ty*ts;

	m_tileBmax[0] = bmin[0] + (tx+1)*ts;
	m_tileBmax[1] = bmax[1];
	m_tileBmax[2] = bmin[2] + (ty+1)*ts;

	m_tileCol = duRGBA(204,25,0,255);

	m_navMesh->removeTile(m_navMesh->getTileRefAt(tx,ty),0,0);
}

//-------------------------------------------------------------------------------------
void OgreTemplate::buildAllTiles()
{
	if (!geom) return;
	if (!m_navMesh) return;

	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();
	int gw = 0, gh = 0;
	rcCalcGridSize(bmin, bmax, cellSize, &gw, &gh);
	const int ts = (int)m_tileSize;
	const int tw = (gw + ts-1) / ts;
	const int th = (gh + ts-1) / ts;
	const float tcs = m_tileSize*cellSize;


	// Start the build process.	
	rcTimeVal totStartTime = rcGetPerformanceTimer();

	for (int y = 0; y < th; ++y)
	{
		for (int x = 0; x < tw; ++x)
		{
			m_tileBmin[0] = bmin[0] + x*tcs;
			m_tileBmin[1] = bmin[1];
			m_tileBmin[2] = bmin[2] + y*tcs;

			m_tileBmax[0] = bmin[0] + (x+1)*tcs;
			m_tileBmax[1] = bmax[1];
			m_tileBmax[2] = bmin[2] + (y+1)*tcs;

			int dataSize = 0;
			unsigned char* data = buildTileMesh(x, y, m_tileBmin, m_tileBmax, dataSize);
			if (data)
			{
				// Remove any previous data (navmesh owns and deletes the data).
				m_navMesh->removeTile(m_navMesh->getTileRefAt(x,y),0,0);
				// Let the navmesh own the data.
				if (!m_navMesh->addTile(data,dataSize,true))
					delete [] data;
			}
		}
	}

	// Start the build process.	
	rcTimeVal totEndTime = rcGetPerformanceTimer();

	m_totalBuildTimeMs = rcGetDeltaTimeUsec(totStartTime, totEndTime)/1000.0f;
}

//-------------------------------------------------------------------------------------
void OgreTemplate::removeAllTiles()
{
	const float* bmin = geom->getMeshBoundsMin();
	const float* bmax = geom->getMeshBoundsMax();
	int gw = 0, gh = 0;
	rcCalcGridSize(bmin, bmax, cellSize, &gw, &gh);
	const int ts = (int)m_tileSize;
	const int tw = (gw + ts-1) / ts;
	const int th = (gh + ts-1) / ts;

	for (int y = 0; y < th; ++y)
		for (int x = 0; x < tw; ++x)
			m_navMesh->removeTile(m_navMesh->getTileRefAt(x,y),0,0);
}

//-------------------------------------------------------------------------------------
unsigned char* OgreTemplate::buildTileMesh(const int tx, const int ty, const float* bmin, const float* bmax, int& dataSize)
{
	if (!geom || !geom->getMesh() || !geom->getChunkyMesh())
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Input mesh is not specified.");
		return 0;
	}

	cleanup();

	const float* verts = geom->getMesh()->getVerts();
	const int nverts = geom->getMesh()->getVertCount();
	const int ntris = geom->getMesh()->getTriCount();
	const rcChunkyTriMesh* chunkyMesh = geom->getChunkyMesh();

	// Init build configuration from GUI
	memset(&m_cfg, 0, sizeof(m_cfg));
	m_cfg.cs = cellSize;
	m_cfg.ch = cellHeight;
	m_cfg.walkableSlopeAngle = agentMaxSlope;
	m_cfg.walkableHeight = (int)ceilf(agentHeight / m_cfg.ch);
	m_cfg.walkableClimb = (int)floorf(agentMaxClimb / m_cfg.ch);
	m_cfg.walkableRadius = (int)ceilf(agentRadius / m_cfg.cs);
	m_cfg.maxEdgeLen = (int)(edgeMaxLen / cellSize);
	m_cfg.maxSimplificationError = edgeMaxError;
	m_cfg.minRegionSize = (int)rcSqr(regionMinSize);
	m_cfg.mergeRegionSize = (int)rcSqr(regionMergeSize);
	m_cfg.maxVertsPerPoly = (int)vertsPerPoly;
	m_cfg.tileSize = (int)m_tileSize;
	m_cfg.borderSize = m_cfg.walkableRadius + 3; // Reserve enough padding.
	m_cfg.width = m_cfg.tileSize + m_cfg.borderSize*2;
	m_cfg.height = m_cfg.tileSize + m_cfg.borderSize*2;
	m_cfg.detailSampleDist = detailSampleDist < 0.9f ? 0 : cellSize * detailSampleDist;
	m_cfg.detailSampleMaxError = cellHeight * detailSampleMaxError;

	rcVcopy(m_cfg.bmin, bmin);
	rcVcopy(m_cfg.bmax, bmax);
	m_cfg.bmin[0] -= m_cfg.borderSize*m_cfg.cs;
	m_cfg.bmin[2] -= m_cfg.borderSize*m_cfg.cs;
	m_cfg.bmax[0] += m_cfg.borderSize*m_cfg.cs;
	m_cfg.bmax[2] += m_cfg.borderSize*m_cfg.cs;

	// Reset build times gathering.
	memset(&m_buildTimes, 0, sizeof(m_buildTimes));
	rcSetBuildTimes(&m_buildTimes);

	// Start the build process.	
	rcTimeVal totStartTime = rcGetPerformanceTimer();

	if (rcGetLog())
	{
		rcGetLog()->log(RC_LOG_PROGRESS, "Building navigation:");
		rcGetLog()->log(RC_LOG_PROGRESS, " - %d x %d cells", m_cfg.width, m_cfg.height);
		rcGetLog()->log(RC_LOG_PROGRESS, " - %.1fK verts, %.1fK tris", nverts/1000.0f, ntris/1000.0f);
	}

	// Allocate voxel heighfield where we rasterize our input data to.
	m_solid = new rcHeightfield;
	if (!m_solid)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'solid'.");
		return 0;
	}
	if (!rcCreateHeightfield(*m_solid, m_cfg.width, m_cfg.height, m_cfg.bmin, m_cfg.bmax, m_cfg.cs, m_cfg.ch))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not create solid heightfield.");
		return 0;
	}

	// Allocate array that can hold triangle flags.
	// If you have multiple meshes you need to process, allocate
	// and array which can hold the max number of triangles you need to process.
	m_triflags = new unsigned char[chunkyMesh->maxTrisPerChunk];
	if (!m_triflags)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'triangleFlags' (%d).", chunkyMesh->maxTrisPerChunk);
		return 0;
	}


	float tbmin[2], tbmax[2];
	tbmin[0] = m_cfg.bmin[0];
	tbmin[1] = m_cfg.bmin[2];
	tbmax[0] = m_cfg.bmax[0];
	tbmax[1] = m_cfg.bmax[2];
	int cid[512];// TODO: Make grow when returning too many items.
	const int ncid = rcGetChunksInRect(chunkyMesh, tbmin, tbmax, cid, 512);
	if (!ncid)
		return 0;

	m_tileTriCount = 0;

	for (int i = 0; i < ncid; ++i)
	{
		const rcChunkyTriMeshNode& node = chunkyMesh->nodes[cid[i]];
		const int* tris = &chunkyMesh->tris[node.i*3];
		const int ntris = node.n;

		m_tileTriCount += ntris;

		memset(m_triflags, 0, ntris*sizeof(unsigned char));
		rcMarkWalkableTriangles(m_cfg.walkableSlopeAngle,
			verts, nverts, tris, ntris, m_triflags);

		rcRasterizeTriangles(verts, nverts, tris, m_triflags, ntris, *m_solid, m_cfg.walkableClimb);
	}

	if (!m_keepInterResults)
	{
		delete [] m_triflags;
		m_triflags = 0;
	}

	// Once all geoemtry is rasterized, we do initial pass of filtering to
	// remove unwanted overhangs caused by the conservative rasterization
	// as well as filter spans where the character cannot possibly stand.
	rcFilterLowHangingWalkableObstacles(m_cfg.walkableClimb, *m_solid);
	rcFilterLedgeSpans(m_cfg.walkableHeight, m_cfg.walkableClimb, *m_solid);
	rcFilterWalkableLowHeightSpans(m_cfg.walkableHeight, *m_solid);

	// Compact the heightfield so that it is faster to handle from now on.
	// This will result more cache coherent data as well as the neighbours
	// between walkable cells will be calculated.
	m_chf = new rcCompactHeightfield;
	if (!m_chf)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'chf'.");
		return 0;
	}
	if (!rcBuildCompactHeightfield(m_cfg.walkableHeight, m_cfg.walkableClimb, RC_WALKABLE, *m_solid, *m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build compact data.");
		return 0;
	}

	if (!m_keepInterResults)
	{
		delete m_solid;
		m_solid = 0;
	}

	// Erode the walkable area by agent radius.
	if (!rcErodeArea(RC_WALKABLE_AREA, m_cfg.walkableRadius, *m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not erode.");
		return false;
	}

	// (Optional) Mark areas.
	const ConvexVolume* vols = geom->getConvexVolumes();
	for (int i  = 0; i < geom->getConvexVolumeCount(); ++i)
		rcMarkConvexPolyArea(vols[i].verts, vols[i].nverts, vols[i].hmin, vols[i].hmax, (unsigned char)vols[i].area, *m_chf);

	// Prepare for region partitioning, by calculating distance field along the walkable surface.
	if (!rcBuildDistanceField(*m_chf))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build distance field.");
		return 0;
	}

	// Partition the walkable surface into simple regions without holes.
	if (!rcBuildRegions(*m_chf, m_cfg.borderSize, m_cfg.minRegionSize, m_cfg.mergeRegionSize))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not build regions.");
		return 0;
	}

	// Create contours.
	m_cset = new rcContourSet;
	if (!m_cset)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'cset'.");
		return 0;
	}
	if (!rcBuildContours(*m_chf, m_cfg.maxSimplificationError, m_cfg.maxEdgeLen, *m_cset))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not create contours.");
		return 0;
	}

	if (m_cset->nconts == 0)
	{
		return 0;
	}

	// Build polygon navmesh from the contours.
	m_pmesh = new rcPolyMesh;
	if (!m_pmesh)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'pmesh'.");
		return 0;
	}
	if (!rcBuildPolyMesh(*m_cset, m_cfg.maxVertsPerPoly, *m_pmesh))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could not triangulate contours.");
		return 0;
	}

	// Build detail mesh.
	m_dmesh = new rcPolyMeshDetail;
	if (!m_dmesh)
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Out of memory 'dmesh'.");
		return 0;
	}

	if (!rcBuildPolyMeshDetail(*m_pmesh, *m_chf,
		m_cfg.detailSampleDist, m_cfg.detailSampleMaxError,
		*m_dmesh))
	{
		if (rcGetLog())
			rcGetLog()->log(RC_LOG_ERROR, "buildNavigation: Could build polymesh detail.");
		return 0;
	}

	if (!m_keepInterResults)
	{
		delete m_chf;
		m_chf = 0;
		delete m_cset;
		m_cset = 0;
	}

	unsigned char* navData = 0;
	int navDataSize = 0;
	if (m_cfg.maxVertsPerPoly <= DT_VERTS_PER_POLYGON)
	{
		// Remove padding from the polymesh data. TODO: Remove this odditity.
		for (int i = 0; i < m_pmesh->nverts; ++i)
		{
			unsigned short* v = &m_pmesh->verts[i*3];
			v[0] -= (unsigned short)m_cfg.borderSize;
			v[2] -= (unsigned short)m_cfg.borderSize;
		}

		if (m_pmesh->nverts >= 0xffff)
		{
			// The vertex indices are ushorts, and cannot point to more than 0xffff vertices.
			if (rcGetLog())
				rcGetLog()->log(RC_LOG_ERROR, "Too many vertices per tile %d (max: %d).", m_pmesh->nverts, 0xffff);
			return false;
		}

		// Update poly flags from areas.
		for (int i = 0; i < m_pmesh->npolys; ++i)
		{
			if (m_pmesh->areas[i] == RC_WALKABLE_AREA)
				m_pmesh->areas[i] = SAMPLE_POLYAREA_GROUND;

			if (m_pmesh->areas[i] == SAMPLE_POLYAREA_GROUND ||
				m_pmesh->areas[i] == SAMPLE_POLYAREA_GRASS ||
				m_pmesh->areas[i] == SAMPLE_POLYAREA_ROAD)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_WALK;
			}
			else if (m_pmesh->areas[i] == SAMPLE_POLYAREA_WATER)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_SWIM;
			}
			else if (m_pmesh->areas[i] == SAMPLE_POLYAREA_DOOR)
			{
				m_pmesh->flags[i] = SAMPLE_POLYFLAGS_WALK | SAMPLE_POLYFLAGS_DOOR;
			}
		}

		dtNavMeshCreateParams params;
		memset(&params, 0, sizeof(params));
		params.verts = m_pmesh->verts;
		params.vertCount = m_pmesh->nverts;
		params.polys = m_pmesh->polys;
		params.polyAreas = m_pmesh->areas;
		params.polyFlags = m_pmesh->flags;
		params.polyCount = m_pmesh->npolys;
		params.nvp = m_pmesh->nvp;
		params.detailMeshes = m_dmesh->meshes;
		params.detailVerts = m_dmesh->verts;
		params.detailVertsCount = m_dmesh->nverts;
		params.detailTris = m_dmesh->tris;
		params.detailTriCount = m_dmesh->ntris;
		params.offMeshConVerts = geom->getOffMeshConnectionVerts();
		params.offMeshConRad = geom->getOffMeshConnectionRads();
		params.offMeshConDir = geom->getOffMeshConnectionDirs();
		params.offMeshConAreas = geom->getOffMeshConnectionAreas();
		params.offMeshConFlags = geom->getOffMeshConnectionFlags();
		params.offMeshConCount = geom->getOffMeshConnectionCount();
		params.walkableHeight = agentHeight;
		params.walkableRadius = agentRadius;
		params.walkableClimb = agentMaxClimb;
		params.tileX = tx;
		params.tileY = ty;
		rcVcopy(params.bmin, bmin);
		rcVcopy(params.bmax, bmax);
		params.cs = m_cfg.cs;
		params.ch = m_cfg.ch;
		params.tileSize = m_cfg.tileSize;

		if (!dtCreateNavMeshData(&params, &navData, &navDataSize))
		{
			if (rcGetLog())
				rcGetLog()->log(RC_LOG_ERROR, "Could not build Detour navmesh.");
			return 0;
		}
	}
	m_tileMemUsage = navDataSize/1024.0f;

	rcTimeVal totEndTime = rcGetPerformanceTimer();

	// Show performance stats.
	if (rcGetLog())
	{
		const float pc = 100.0f / rcGetDeltaTimeUsec(totStartTime, totEndTime);

		rcGetLog()->log(RC_LOG_PROGRESS, "Rasterize: %.1fms (%.1f%%)", m_buildTimes.rasterizeTriangles/1000.0f, m_buildTimes.rasterizeTriangles*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Compact: %.1fms (%.1f%%)", m_buildTimes.buildCompact/1000.0f, m_buildTimes.buildCompact*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Border: %.1fms (%.1f%%)", m_buildTimes.filterBorder/1000.0f, m_buildTimes.filterBorder*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Walkable: %.1fms (%.1f%%)", m_buildTimes.filterWalkable/1000.0f, m_buildTimes.filterWalkable*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Filter Reachable: %.1fms (%.1f%%)", m_buildTimes.filterMarkReachable/1000.0f, m_buildTimes.filterMarkReachable*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Erode walkable area: %.1fms (%.1f%%)", m_buildTimes.erodeArea/1000.0f, m_buildTimes.erodeArea*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Distancefield: %.1fms (%.1f%%)", m_buildTimes.buildDistanceField/1000.0f, m_buildTimes.buildDistanceField*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - distance: %.1fms (%.1f%%)", m_buildTimes.buildDistanceFieldDist/1000.0f, m_buildTimes.buildDistanceFieldDist*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - blur: %.1fms (%.1f%%)", m_buildTimes.buildDistanceFieldBlur/1000.0f, m_buildTimes.buildDistanceFieldBlur*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Regions: %.1fms (%.1f%%)", m_buildTimes.buildRegions/1000.0f, m_buildTimes.buildRegions*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - watershed: %.1fms (%.1f%%)", m_buildTimes.buildRegionsReg/1000.0f, m_buildTimes.buildRegionsReg*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "    - expand: %.1fms (%.1f%%)", m_buildTimes.buildRegionsExp/1000.0f, m_buildTimes.buildRegionsExp*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "    - find catchment basins: %.1fms (%.1f%%)", m_buildTimes.buildRegionsFlood/1000.0f, m_buildTimes.buildRegionsFlood*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - filter: %.1fms (%.1f%%)", m_buildTimes.buildRegionsFilter/1000.0f, m_buildTimes.buildRegionsFilter*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Contours: %.1fms (%.1f%%)", m_buildTimes.buildContours/1000.0f, m_buildTimes.buildContours*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - trace: %.1fms (%.1f%%)", m_buildTimes.buildContoursTrace/1000.0f, m_buildTimes.buildContoursTrace*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "  - simplify: %.1fms (%.1f%%)", m_buildTimes.buildContoursSimplify/1000.0f, m_buildTimes.buildContoursSimplify*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Build Polymesh: %.1fms (%.1f%%)", m_buildTimes.buildPolymesh/1000.0f, m_buildTimes.buildPolymesh*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Build Polymesh Detail: %.1fms (%.1f%%)", m_buildTimes.buildDetailMesh/1000.0f, m_buildTimes.buildDetailMesh*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Merge Polymeshes: %.1fms (%.1f%%)", m_buildTimes.mergePolyMesh/1000.0f, m_buildTimes.mergePolyMesh*pc);
		rcGetLog()->log(RC_LOG_PROGRESS, "Merge Polymesh Details: %.1fms (%.1f%%)", m_buildTimes.mergePolyMeshDetail/1000.0f, m_buildTimes.mergePolyMeshDetail*pc);


		rcGetLog()->log(RC_LOG_PROGRESS, "Build Polymesh: %.1fms (%.1f%%)", m_buildTimes.buildPolymesh/1000.0f, m_buildTimes.buildPolymesh*pc);

		rcGetLog()->log(RC_LOG_PROGRESS, "Polymesh: Verts:%d  Polys:%d", m_pmesh->nverts, m_pmesh->npolys);

		rcGetLog()->log(RC_LOG_PROGRESS, "TOTAL: %.1fms", rcGetDeltaTimeUsec(totStartTime, totEndTime)/1000.0f);
	}

	m_tileBuildTime = rcGetDeltaTimeUsec(totStartTime, totEndTime)/1000.0f;

	dataSize = navDataSize;
	return navData;
}

//----------------------------------------------------
const float* OgreTemplate::getBoundsMin()
{
	if (!geom) return 0;
	return geom->getMeshBoundsMin();
}

//----------------------------------------------------
const float*OgreTemplate::getBoundsMax()
{
	if (!geom) return 0;
	return geom->getMeshBoundsMax();
}