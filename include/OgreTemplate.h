//----------------------------------------------------------------------------------//
// OgreRecast Demo - A demonstration of integrating Recast Navigation Meshes		//
//					 with the Ogre3D rendering engine.								//
//																					//
//	This file was either Created by or Modified by :								//
//													Paul A Wilson 					//
//			All contents are Copyright (C) 2010 Paul A Wilson						//
//			Except where otherwise mentioned or where previous						//
//			copyright exists. In the case of pre-existing copyrights				//
//			all rights remain with the original Authors, and this is				//
//			to be considered a derivative work.										//
//																					//
//	Contact Email	:	paulwilson77@dodo.com.au									//
//																					//
// This 'SOFTWARE' is provided 'AS-IS', without any express or implied				//
// warranty.  In no event will the authors be held liable for any damages			//
// arising from the use of this software.											//
// Permission is granted to anyone to use this software for any purpose,			//
// including commercial applications, and to alter it and redistribute it			//
// freely, subject to the following restrictions:									//
// 1. The origin of this software must not be misrepresented; you must not			//
//    claim that you wrote the original software. If you use this software			//
//    in a product, an acknowledgment in the product documentation would be			//
//    appreciated but is not required.												//
// 2. Altered source versions must be plainly marked as such, and must not be		//
//    misrepresented as being the original software.								//
// 3. This notice may not be removed or altered from any source distribution.		//
//																					//
//----------------------------------------------------------------------------------//



/*
-----------------------------------------------------------------------------
Filename:    OgreTemplate.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
	  Ogre 1.7.x Application Wizard for VC9 (January 2010)
	  http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __OgreTemplate_h_
#define __OgreTemplate_h_

#include <vector>
#include "BaseApplication.h"
#include "SharedData.h"
#include "Filelist.h"
#include "Recast.h"
#include "RecastLog.h"
#include "DetourNavMesh.h"
#include "DebugDraw.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif


class InputGeom;
class dtNavMesh;
class OgreConsole;
class GUIManager;
class OgreTemplate;


#define NAVMESHFILE Ogre::String("all_tiles_navmesh.bin")

struct DebugDrawGL : public duDebugDraw
{
	DebugDrawGL();
	~DebugDrawGL();
	virtual void depthMask(bool state);
	virtual void begin(duDebugDrawPrimitives prim, float size = 1.0f);
	virtual void vertex(const float* pos, unsigned int color);
	virtual void vertex(const float x, const float y, const float z, unsigned int color);
	virtual void vertex(const float* pos, Ogre::ColourValue &color);
	virtual void vertex(const float x, const float y, const float z, Ogre::ColourValue &color);
	virtual void end();
	virtual void clear();

	virtual void createDefaultMaterial(void);
	virtual void setMaterialScript(Ogre::String& matName);
	Ogre::MaterialPtr getMaterial(void) { return mMtrl; }
	Ogre::ManualObject* getObject(void) { return obj; }
	Ogre::String getMaterialName(void) { return mtl; }
	Ogre::String getObjectName(void) { return name; }
	virtual bool getBeginCalledOnce(void) { return mBeginCalledOnce; }

	virtual void setOffset(float _offset) { mYOffset = _offset; }
	virtual void setActive(bool _setActive) { mActive = _setActive; }

protected:

	virtual void createDefaultMaterial(Ogre::String& matName);

	Ogre::MaterialPtr mMtrl;
	Ogre::ManualObject* obj;
	Ogre::String name;
	Ogre::String mtl;
	float mYOffset;
	bool mBeginCalledOnce; // unused
	bool mActive;
};

// Abstract class used for base to inherit sample's tools from
// this allows us to use generic methods to pass tool data to and from
// various places using static_cast<>() operators
struct SampleTool
{
	virtual ~SampleTool() {}
	virtual int type() = 0;
	virtual void init(OgreTemplate* sample) = 0;
	virtual void reset() = 0;
	virtual void handleClick(const float* p, bool shift) = 0;
	virtual void handleRender() = 0;
	virtual void handleStep() = 0;
};


static const int MAX_POLYS = 256;
static const int MAX_SMOOTH = 2048;


class OgreTemplate : public BaseApplication
{
public:

	OgreTemplate(void);
	virtual ~OgreTemplate(void);

	// frame listener callbacks
	virtual bool frameStarted(const Ogre::FrameEvent& evt);
	virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	virtual bool frameEnded(const Ogre::FrameEvent& evt);

	// OIS listener callbacks
	virtual bool keyPressed( const OIS::KeyEvent &arg );
	virtual bool keyReleased( const OIS::KeyEvent &arg );
	virtual bool mouseMoved( const OIS::MouseEvent &arg );
	virtual bool mousePressed( const OIS::MouseEvent &arg, OIS::MouseButtonID id );
	virtual bool mouseReleased( const OIS::MouseEvent &arg, OIS::MouseButtonID id );

	// getters for navmesh stuff
	virtual class InputGeom* getInputGeom() { return geom; }
	virtual class dtNavMesh* getNavMesh() { return m_navMesh; }
	virtual float getAgentRadius() { return agentRadius; }
	virtual float getAgentHeight() { return agentHeight; }
	virtual float getAgentClimb() { return agentMaxClimb; }
	virtual const float* getBoundsMin();
	virtual const float* getBoundsMax();

	inline unsigned char getNavMeshDrawFlags() const { return m_navMeshDrawFlags; }
	inline void setNavMeshDrawFlags(unsigned char flags) { m_navMeshDrawFlags = flags; }

	GUIManager* getGUI(void) { return DemoGUI; }
	SampleTool* getCurrentTool(void) { return m_tool; }
	virtual void handleRenderDebug();
	virtual void handleRenderTiles();
	inline bool handleValidDrawModes(void);

	CurrentTextureFilterMode getFilterMode(void) { return m_textureFilter; }

	void setCurrentMeshName(Ogre::String _name) { currentMeshName = _name; mMeshChanged = true; }
	void setMeshChanged(bool _changed) { mMeshChanged = _changed; }

	void setSampleToolType(int _tooltype);
	void setSampleToolChanged(bool _changed) { mSampleToolChanged = _changed; }
	void setDebugDrawMode(DrawMode _mode) { m_drawMode = _mode; }

	void setCastRays(bool _setCast) { mCastRays = _setCast; }

	void setBuildCellSize(float _cellSize) { cellSize = _cellSize; }
	void setBuildCellHeight(float _cellHeight) { cellHeight = _cellHeight; }
	void setBuildAgentHeight(float _agentHeight) { agentHeight = _agentHeight; }
	void setBuildAgentRadius(float _agentRadius) { agentRadius = _agentRadius; }
	void setBuildAgentMaxClimb(float _agentMaxClimb) { agentMaxClimb = _agentMaxClimb; }
	void setBuildAgentMaxSlope(float _agentMaxSlope) { agentMaxSlope = _agentMaxSlope; }
	void setBuildRegionSize(float _regionMinSize) { regionMinSize = _regionMinSize; }
	void setBuildRegionMerge(float _regionMergeSize) { regionMergeSize = _regionMergeSize; }
	void setBuildEdgeLength(float _edgeMaxLen) { edgeMaxLen = _edgeMaxLen; }
	void setBuildEdgeError(float _edgeMaxError) { edgeMaxError = _edgeMaxError; }
	void setBuildVertPerPoly(float _vertsPerPoly) { vertsPerPoly = _vertsPerPoly; }
	void setBuildSampleDist(float _detailSampleDist) { detailSampleDist = _detailSampleDist; }
	void setBuildSampleError(float _detailSampleMaxError) { detailSampleMaxError = _detailSampleMaxError; }

	void setBuildTileSize(float _tilesize) { m_tileSize = _tilesize; }
	
	// this should be protected and have a get method implemented
	bool valid[MAX_DRAWMODE];

	virtual bool handleBuild();

	void buildTile(const float* pos);
	void removeTile(const float* pos);
	void buildAllTiles();
	void removeAllTiles();

	void cleanup();

	virtual void setCurrentSkybox(int _skybox);

protected:

	virtual void createScene(void);
	virtual void setupGUI(void);

	virtual bool buildNavMesh(NavSceneNodeList sceneNodeList, Ogre::SceneNode *parentSceneNode);

	unsigned char* buildTileMesh(const int tx, const int ty, const float* bmin, const float* bmax, int& dataSize);
	void saveAll(const char* path, const dtNavMesh* mesh);
	dtNavMesh* loadAll(const char* path);

	virtual void showNavMesh(rcPolyMesh *polyMesh, Ogre::SceneNode *parentSceneNode);
	virtual void hideNavMesh(void);

	void resetCommonSettings();
	void setTool(SampleTool* tool);
	void handleToolChange(void);

	void handleSaveNavMesh(Ogre::String& saveName);
	void handleLoadNavMesh(Ogre::String& loadName);

	void clearNavMesh(void);
	void handleMeshChange(void);

	bool mNavMeshShown;
	bool mNavMeshBuilt;
	
	NavSceneNodeList mNavNodeList;
	rcBuildTimes m_buildTimes;
	bool m_keepInterResults;
	bool m_buildAll;
	float m_totalBuildTimeMs;

	unsigned char* m_triflags;
	rcHeightfield* m_solid;
	rcCompactHeightfield* m_chf;
	rcContourSet* m_cset;
	rcPolyMesh* m_pmesh;
	rcConfig m_cfg;	
	rcPolyMeshDetail* m_dmesh;
	InputGeom* geom;
	dtNavMesh* m_navMesh;
	unsigned char m_navMeshDrawFlags;
	
	int m_maxTiles;
	int m_maxPolysPerTile;
	float m_tileSize;

	unsigned int m_tileCol;
	float m_tileBmin[3];
	float m_tileBmax[3];
	float m_tileBuildTime;
	float m_tileMemUsage;
	int m_tileTriCount;

	// unused
	Ogre::RaySceneQuery* mRaySceneQuery;
	bool mMatsLoaded;
	bool mDebugEnabled;
	bool mShowTestEnabled;

	// this has to be close to the nastiest most inefficient thing i have done with Ogre
	// but it works for its purpose so..... call me lazy lol
	// TODO : refactor the debugdrawer to be more efficient
	DebugDrawGL* ddBoundsDrawer;
	DebugDrawGL* ddMain;
	DebugDrawGL* ddConvex;
	DebugDrawGL* ddOffMesh;
	DebugDrawGL* ddTiles;
	DebugDrawGL* ddActiveTile;

	// config vars
	bool keepInterResults;// = true;
	float cellSize;// = 0.3f;
    float cellHeight;// = 0.2f;
    float agentHeight;// = 2.0f;
    float agentRadius;// = 0.6f;
    float agentMaxClimb;// = 0.2f;
    float agentMaxSlope;// = 45.0f;
    float regionMinSize;// = 50;
    float regionMergeSize;// = 20;
    float edgeMaxLen;// = 12.0f;
    float edgeMaxError;// = 1.3f;
    float vertsPerPoly;// = 6.0f;
    float detailSampleDist;// = 6.0f;
    float detailSampleMaxError;// = 1.0f;

	bool mSampleToolChanged;
	SampleToolType m_sampleToolType;
	DrawMode m_drawMode;

	bool processHitTest;
	bool processHitTestShift;
	bool movedDuringRotate;
	bool mposSet;
	bool mCastRays;
	float rays[3];
	float raye[3];
	float mpos[3];
	
	GUIManager* DemoGUI;
	Ogre::Real cursorX;
	Ogre::Real cursorY;
	Ogre::Ray r;

	SampleTool* m_tool;
	
	FileList files;
	FileList saveFiles;
	Ogre::String currentMeshName;
	bool mMeshChanged;
	bool recalcActiveTile;

	Ogre::Log* mNavMeshLog;

	ApplicationSkyboxType mCurrentSkybox;

};

#endif // __OgreTemplate_h_